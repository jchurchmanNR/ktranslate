name: Publish Windows

on:
  repository_dispatch:
    types: [new-snmp-profiles]

  push:
    branches:
      - main
      - devwin
      - win-build-msi

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Create Code Signing Certificate
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.WINDOWS_SIGNING_CERT }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          certutil -f -p ${{ secrets.WINDOWS_CERT_PASS }} -importpfx certificate\certificate.pfx
          certutil -repairstore my 096b8a8918d52a579df3395ed4b11a3a
          certutil -view
          certutil -store my ktranslate.kentik.com


      - name: Sign Cert
        run: |
          & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /debug /v /fd SHA256 /sha1 c5fdb2bddead3979f32667da0620726493f888d8 ktranslate.msi

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0         # Fetch all history for .GitInfo and .Lastmod

      - name: Set Version
        run: |
           echo KENTIK_KTRANSLATE_VERSION=`date +"kt-%Y-%m-%d-${GITHUB_RUN_ID}"` >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'

      - name: Install dependencies
        run: sudo apt-get install make libpcap-dev golint

      - name: Install MM DBs
        run: |
          MM_DOWNLOAD_KEY=${{ secrets.MM_DOWNLOAD_KEY }} ./bin/get_mm.sh

      - name: Install SNMP Profiles
        uses: actions/checkout@main
        with:
          repository: kentik/snmp-profiles
          path: ./config/profiles

      - name: Run build
        run: |
          echo ${{ env.KENTIK_KTRANSLATE_VERSION }}
          KENTIK_KTRANSLATE_VERSION=${{ env.KENTIK_KTRANSLATE_VERSION }} make windows

      - name: Run vet & lint
        run: |
          go vet .
          golint .

      - name: Run testing
        run: make test

      - name: Archive binary and config artifacts
        uses: actions/upload-artifact@v2
        with:
          name: win-build-artifacts
          path: |
            config
            !config/profiles/.git*
            bin

  build-msi:
    runs-on: windows-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: win-build-artifacts
          path: "."

      - name: Build MSI
        run: |
          $env:ProductCode = [guid]::NewGuid().ToString()
          & "$env:WIX\bin\heat.exe" dir ".\config\profiles" -platform x64 -var var.SnmpProfilesPath -dr ConfigDir -cg SnmpProfiles -ag -sfrag -out SnmpProfiles.wxs -nologo
          & "$env:WIX\bin\candle.exe" -dVersion="$(Get-Date -Format 'yy.MM.dd')" -dPath="./" -dSnmpProfilesPath="./config/profiles"  -ext WixUtilExtension -ext WixUIExtension ktranslate.wxs SnmpProfiles.wxs -arch x64 -nologo
          & "$env:WIX\bin\light.exe" ktranslate.wixobj SnmpProfiles.wixobj -out ktranslate.msi -ext WixUtilExtension  -ext WixUIExtension -nologo

      - name: Create Code Signing Certificate
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.WINDOWS_SIGNING_CERT }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          certutil -f -p ${{ secrets.WINDOWS_CERT_PASS }} -importpfx certificate\certificate.pfx

      - name: Sign Cert
        run: |
          & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /debug /fd SHA256 /f certificate\certificate.pfx /p '${{ secrets.WINDOWS_CERT_PASS }}' ktranslate.msi

      - name: Publish MSI
        uses: actions/upload-artifact@v2
        with:
          name: ktranslate.msi
          path: ktranslate.msi